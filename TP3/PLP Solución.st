Object subclass: #FormulaDisplayer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FormulaDisplayer class	instanceVariableNames: ''!!FormulaDisplayer class methodsFor: 'as yet unclassified' stamp: 'NChamo 6/20/2016 11:45'!printFormula: aFormula	"Returns the string of a formula, with parenthesis if needed"	^ (aFormula isKindOf: BinaryFormula) ifTrue: [ '( ' , (aFormula asString) , ' )' ] ifFalse: [ aFormula asString ].! !Object subclass: #PropositionalFormula	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:22'!==> aFormula	"Creates a new Implication formula"		^ Implication of: self and: aFormula.	! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/20/2016 11:46'!not 	"Creates a new Negation formula"		^ Negation of: self .	! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:19'!| aFormula	"Creates a new Disjunction formula"		^ Disjunction of: self and: aFormula.	! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:17'!hash	"Returns the hash of the formula"		^ self asString hash.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:16'!= aFormula	"Compares 2 formulas"	^ (self asString) = (aFormula asString)! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:14'!printString	"Prints the formula as a string"	^ self asString.! !!PropositionalFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:19'!& aFormula	"Creates a new Conjunction formula"		^ Conjunction of: self and: aFormula.	! !PropositionalFormula subclass: #BinaryFormula	instanceVariableNames: 'form1 form2'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!BinaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:04'!allPropVars	"Return the name of all the vars in the formula"	| vars1 vars2 |		vars1 := form1 allPropVars.	vars2 := form2 allPropVars.		vars2 do: [:each | vars1 add: each]. 	^ vars1.		! !!BinaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 15:53'!setForm1: aFormula1 setForm2: aFormula2	form1 := aFormula1.	form2 := aFormula2.	^ self.! !!BinaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:13'!value: aSet	"Return the evaluation of the formula"	| val1 val2 |		val1 := form1 value: aSet.	val2 := form2 value: aSet.		^ (Message selector: (self operator) argument: val2) sendTo: val1.! !!BinaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:11'!asString 	"Prints the formula as a string"	| theOperator string1 string2 |		theOperator := self operator.	string1 := FormulaDisplayer printFormula: form1.	string2 := FormulaDisplayer printFormula: form2.		^ string1, ' ', theOperator, ' ', string2.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BinaryFormula class	instanceVariableNames: ''!!BinaryFormula class methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 15:52'!of: f1 and: f2.	"Create a new binary formula with the given formulas"	^ self new setForm1: f1 setForm2: f2.! !BinaryFormula subclass: #Conjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!Conjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:06'!operator	"Returns the conjunction operator"	^ #&.! !!Conjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:52'!negate	"Negates the formula"	^ Disjunction of: (form1 negate) and: (form2 negate)! !!Conjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:14'!toNNF	"Transforms the formula to its NNF version"	^ Conjunction of: (form1 toNNF) and: (form2 toNNF).! !BinaryFormula subclass: #Disjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!Disjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:06'!operator	"Returns the disjunction operator"	^ #|.! !!Disjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:52'!negate	"Negates the formula"	^ Conjunction of: (form1 negate) and: (form2 negate).! !!Disjunction methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:14'!toNNF	"Transforms the formula to its NNF version"	^ Disjunction of: (form1 toNNF) and: (form2 toNNF).! !BinaryFormula subclass: #Implication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!Implication methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:06'!operator	"Returns the implication operator"	^ #==>.! !!Implication methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:51'!negate	"Negates the formula"	^ Conjunction of: form1 and: (form2 negate).! !!Implication methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:15'!toNNF	"Transforms the formula to its NNF version"	^ Disjunction of: (form1 negate toNNF) and: (form2 toNNF).! !PropositionalFormula subclass: #PropositionalVariable	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:25'!value: aSet	"Returns true iif the name of the var is contained in the set"	^ aSet includes: name.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:16'!toNNF	"Transforms the formula to its NNF version"	^ self.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/20/2016 11:47'!setName: aString	"Used to set the name of the variable"		name := aString.	^ self.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:53'!negate	"Negates the formula"	^ Negation of: self.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:10'!allPropVars	"Returns the name of the var"	^ Set newFrom: {name}.! !!PropositionalVariable methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:49'!asString 	"Prints the formula as a string"	^ name.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PropositionalVariable class	instanceVariableNames: ''!!PropositionalVariable class methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 15:37'!named: aString	"Creates a Propositional Variable with a name"		^ self new setName: aString! !PropositionalFormula subclass: #UnaryFormula	instanceVariableNames: 'form'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!UnaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:12'!setFormula: aFormula	"Sets the formula for the negation"	form := aFormula.	^ self.! !!UnaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:01'!allPropVars	"Returns the name of all the vars in the formula"		^ form allPropVars.		! !!UnaryFormula methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 18:11'!asString 	"Prints the formula as a string"	^ '¬', (FormulaDisplayer printFormula: form).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!UnaryFormula class	instanceVariableNames: ''!!UnaryFormula class methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 16:12'!of: aFormula	"Given a formula, creates a new one negating it"		^ self new setFormula: aFormula.! !UnaryFormula subclass: #Negation	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP Solución'!!Negation methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:00'!operator	"Returns the conjuntion operator"	^ Message selector: #not.! !!Negation methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 17:12'!value: aSet	"Returns the evaluation of the formula"		^ (form value: aSet) not.! !!Negation methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:03'!negate	"Negates the formula"	^ form.! !!Negation methodsFor: 'as yet unclassified' stamp: 'NChamo 6/18/2016 19:31'!toNNF	"Negates the formula"	^ form toNNF negate.! !